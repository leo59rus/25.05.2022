package HW_L1.hw3;

import java.util.Arrays;

public class HW3 {
    //8. *** Написать метод, которому на вход подается одномерный массив и число n (может быть
    //положительным, или отрицательным), при этом метод должен сместить все элементы массива
    //на n позиций. Элементы смещаются циклично. Для усложнения задачи нельзя пользоваться
    //вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5,
    //6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ]. При каком n в какую сторону сдвиг можете
    //выбирать сами.
    public static void main(String[] args) {
        //1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1,
        //0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;
        int [] a = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
               a[i] = 1;
            } else {
                a[i] = 0;
            }
        }
        System.out.println(Arrays.toString(a)); //[0, 0, 1, 1, 0, 1, 0, 0, 1, 1]
        System.out.println();
        //2. Задать пустой целочисленный массив длиной 100. С помощью цикла заполнить его
        //значениями 1 2 3 4 5 6 7 8 … 100;
        int[] b = new int[100];
        for (int i = 0; i < b.length; i++) {
            b[i] = i + 1;
            System.out.print(" " + b[i]);//1 2 3 4 5 6 7 8 … 100
        }
        System.out.println();
        System.out.println();
        //3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6
        //умножить на 2;
        int[] c = { 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 };
        System.out.println("до умножения");
        System.out.println(Arrays.toString(c));
        System.out.println("полсле умножения");
        for (int i = 0; i < c.length; i++) {
            if (c[i] < 6) {
                c[i] *= 2;
            }
            System.out.print(c[i] + "  ");
        }
        System.out.println();
        System.out.println();
        //4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов
        //одинаковое), и с помощью цикла(-ов) заполнить его диагональные элементы единицами
        //(можно только одну из диагоналей, если обе сложно). Определить элементы одной из
        //диагоналей можно по следующему принципу: индексы таких элементов равны, то есть [0][0],
        //[1][1], [2][2], …, [n][n];
        int[][] dia = new int[5][5];
        for (int i = 0; i < dia.length; i++) {
            for (int j = 0; j < dia.length; j++) {
                if(i == j){
                    dia[i][j] = 1;
                } else {
                    dia[i][j] = 0;
            }
                System.out.print(dia[i][j] + "  ");
        }
            System.out.println();
    }
        System.out.println();
        //5. Написать метод, принимающий на вход два аргумента: len и initialValue, и возвращающий
        //одномерный массив типа int длиной len, каждая ячейка которого равна initialValue;
       m(10,8);
        System.out.println();
        //6. * Задать одномерный массив и найти в нем минимальный и максимальный элементы ;
        int[] x = {128, 45, 0, -444, 89, 8, 135};
        int max = 0;
        int min = 0;
        for (int i = 0; i < x.length; i++) {
            if(x[i] < min){
                min = x[i];
            }
        }

        for (int i = 0; i < x.length; i++) {
            if(x[i] > max){
                max = x[i];
            }
        }
        System.out.println("инимальное значание массива " + min + " максимальное значение массива " + max);
        System.out.println();
        //7. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
        //метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части
        //массива равны.
        //Примеры:
        //checkBalance([2, 2, 2, 1, 2, 2, ||| 10, 1]) → true, т.е. 2 + 2 + 2 + 1 + 2 + 2 = 10 + 1
        //checkBalance([1, 1, 1, ||| 2, 1]) → true, т.е. 1 + 1 + 1 = 2 + 1
        //граница показана символами |||, эти символы в массив не входят и не имеют никакого
        //отношения к ИЛИ.

}
    public static void m(int len, int initialvalue){
        int[] a = new int[len];
        for (int i = 0; i < a.length; i++) {
            a[i] = initialvalue;
            System.out.print(a[i] + " ");
        }
        System.out.println();
    }
}
